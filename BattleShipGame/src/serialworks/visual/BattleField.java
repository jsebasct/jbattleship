/*
 * BattleField.java
 *
 * Created on 4 de febrero de 2008, 18:27
 */
package serialworks.visual;

//import java.awt.GridLayout;
import java.awt.Dimension;
//import java.util.logging.Level;
//import java.util.logging.Logger;
import serialworks.comm.ClientSender;
import serialworks.comm.ServerSender;
import serialworks.ship.Ship;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author  bastian
 */
public class BattleField extends javax.swing.JFrame {
    
    private Just just;
    
    private int currentX;
    private int currentY;
    
    //--------------------------------
    private int fila = 10;
    private int columna = 10;    
    //--------------------------------
    
    private ArrayList<Dimension> deshabilitados;
    
    private LabelAtack[][] campoEnemigo;
    private LabelAtack[][] campoPropio;
    private Ship[] ships;//= null;    
    private boolean servidor;
    private ServerSender ss;
    private ClientSender cs;
    private boolean presionado;
    private boolean ganaste = false;
    private String enviar;
    private String ip;
    

    public BattleField(Ship[] ships, boolean servidor, String ip) {
        
        deshabilitados = new ArrayList<Dimension>();
        
        this.servidor = servidor;
        if (!servidor) {
            this.ip = ip;
        }
        
        initComponents();
        
        //esto es interesante si lo hago igualando no funciona:
        this.ships = new Ship[ships.length];
        for (int i = 0; i < ships.length; i++) {
            this.ships[i] = ships[i];
        }

        addMyStuff();
        
        jugar();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pAdversary = new javax.swing.JPanel();
        pOwn = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pAdversary.setBackground(new java.awt.Color(0, 51, 102));
        pAdversary.setMinimumSize(new java.awt.Dimension(200, 200));
        pAdversary.setLayout(new java.awt.GridLayout(10, 10));

        pOwn.setBackground(new java.awt.Color(0, 102, 102));
        pOwn.setLayout(new java.awt.GridLayout(10, 10));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pOwn, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(pAdversary, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pOwn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(pAdversary, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void addMyStuff() {
        init();
        agregar();
        loadShips();
    }

    /**
     * Carga los dos "mapas" y las labeles que en ellos existen
     * Quito tambien los eventos del campo enemigo que estaran
     * asi hasta la conexion del contrincante
     */
    private void init() {
        campoEnemigo = new LabelAtack[fila][columna];
        campoPropio = new LabelAtack[fila][columna];

        //Comprobando posicones en Ships
        Dimension[] pos = null;////////////////////////////////////////////////

        //----este for es solo para que las casillas ocupadas se impriman
        for (int i = 0; i < ships.length; i++)
        {
            pos = ships[i].getPositions();

            System.out.println("Pos de la "+ i + "esima nave: " );
            
            for (int j = 0; j < pos.length; j++)
            {
                int x = (int) pos[j].getWidth();
                int y = (int) pos[j].getHeight();
                System.out.print( "X:" + x + ", Y: " + y + "\t" );
            }            
        }
        //-----------------------------------------

        for (int i = 0; i < campoEnemigo.length; i++) {
            for (int j = 0; j < campoEnemigo[i].length; j++) {

                campoPropio[i][j] = new LabelAtack(i, j);
                campoEnemigo[i][j] = new LabelAtack(this, i, j);
                //porq debe estar asi hasta que alguien se conecte
                campoEnemigo[i][j].setOyente(false);
            }
        }
    }
    
    /**
     * Agrega las labeles a mis dos "mapas"
     */
    private void agregar() {
        
        for (int i = 0; i < campoEnemigo.length; i++)
        {
            for (int j = 0; j < campoEnemigo[i].length; j++) {

                pAdversary.add(campoEnemigo[i][j]);
                pOwn.add(campoPropio[i][j]);
            }
        }
    }

    /**
     * Despues de obtener las pos de los barcos 
     * desabilita el "mapa" entero, no me gusta, no es OO, por lo de los mapas
     * @param ships
     */    
    private void loadShips() {
        for (int i = 0; i < ships.length; i++) {
            loadOnMyOwn(ships[i].getPositions());
        }
        //les quito sus oyentes
        for (int i = 0; i < campoPropio.length; i++) {
            for (int j = 0; j < campoPropio.length; j++) {
                campoPropio[i][j].setOyente(false);
            }
        }
    }

    /**
     * Carga las naves en MI campoDeBatalla
     * @param d
     */
    private void loadOnMyOwn(Dimension[] d) {

        int f = -1;
        int c = -1;

        for (int i = 0; i < d.length; i++)
        {
            f = (int) d[i].getWidth();
            c = (int) d[i].getHeight();

            campoPropio[f][c].putUp();
        }
    }

    //@SuppressWarnings("empty-statement")
    private void jugar() {

        if (servidor) {
            ss = new ServerSender();
            
            System.out.println("Soy un servidor");
            
        } else {

            System.out.println("Soy un cliente");
            cs = new ClientSender(3);
        }

        //habilitar las pociones de campo enemigo si eres un cliente

        if (!servidor) {
            setEnableEnemyField(true);
        } else {
            setEnableEnemyField(false);
        }

        //iterar();
        just = new Just( this );
        just.start();
    }

    private void setEnableEnemyField(boolean enable)
    {
        for (int i = 0; i < campoEnemigo.length; i++) {
            for (int j = 0; j < campoEnemigo[i].length; j++) {
                if (enable) {
                    campoEnemigo[i][j].setOyente(true);
                } else {
                    campoEnemigo[i][j].setOyente(false);
                }
            }
        }
        
        for(Dimension d : deshabilitados)
        {
            int x = (int) d.getWidth();
            int y = (int) d.getHeight();
            
            campoEnemigo[x][y].setOyente(false);
        }
            
    }

    /**
     * Aqui es donde deberia empezarse a jugar en serio , este evento
     * es llamado por el campoEnemigo, mejor dicho por sus casillas
     */
    public void registrarPos(Dimension d)
    {
        currentX = (int) d.getWidth();
        currentY = (int) d.getHeight();
        
        synchronized (this) {        
            notify();
        }
    }
    
    public void addDeshabilitado( Dimension d ){
        deshabilitados.add( d );
    }
    
    /**
     * 
     */
    class Just extends Thread 
    {
        private BattleField bf;
        
        public Just( BattleField bf ){
            this.bf = bf;
        }
        
        private boolean flotaDestruida()
        {
            boolean res = true;
            int i = 0;

            while ((i < ships.length) && (res)) {
                if (ships[i].isDestroyed() == false) {
                    res = false;
                } else {
                    i++;
                }
            }
            return res;
        }
        /**
         * La posicion que recibimos para ver donde cayo en el mapa
         * @param pos
         * @return
         */
    private boolean procesar(String pos)
    {
        boolean res = false;

        try {
            int aux = Integer.parseInt(pos);

            int x = aux / 10;
            int y = aux % 10;
            
            System.out.println("//-----------");
            System.out.println("\tProcesar");
            
            for (int i = 0; i < ships.length; i++)
            {
                System.out.println("Nave:" + i);
                
                if( !ships[i].isDestroyed() )
                {
                    if ( ships[i].damage(new Dimension(x, y)))
                    {
                        res = true;
                    }
                    if ( ships[i].isDestroyed() )
                    {
                        String name = ships[i].getType().toString();
                        
                        System.out.println("\t\tDESTRUIMOS EL " + 
                                                name +" DEL ENEMIGO");
                        
                        JOptionPane.showMessageDialog(null, "The enemi's " +
                                    name + " has been destroyed !!!");
                    }
                     
                }
            }
            
            
            bf.campoPropio[x][y].setOyente(true);
            if( res )
            {
                campoPropio[x][y].estadoDaniado();/////////////////////
                System.out.println("Entro a procesar estado hacertado");
                
            }else{
                bf.campoPropio[x][y].estadoIntento();
            }
            bf.campoPropio[x][y].setOyente( false );
               
            
            //campoPropio[x][y].estadoClik();
            //campoEnemigo[x][y].estadoClik();
            
            //c//ampoPropio[x][y].setOyente(false);
            //System.out.println(" DESHabilitando oyente ");
            
            //deshabilitados.add(new Dimension( x, y ));

        } catch (Exception e) {

            System.out.println("Algo paso extraño... en BAttleField");
            ganaste = true;//o tal vez perdiste... quien sabe//////////////////
        }
        return res;
    }
    
    private void iterar() {
        try {
            if (servidor == true) {

                iterarServidor();

            } else {

                iterarCliente();                
            }

        } catch (Exception e) {
            System.out.println("En Battlefield método iterar");
            e.printStackTrace();
        }
    }

    private void iterarServidor()
    {
        String aux = "";

        while (true)
        {
            enviar = "fallaste";
            
            while (  (procesar( ss.comunicationReceive() ) ) == true)
            {
                
                
                if ( flotaDestruida() == true ) {
                    System.out.println("Nuestra a flota esta destruida");
                    enviar = "ganaste";
                }else {
                    enviar = "acertaste";
                }                
                ss.sendAnswer(enviar);
                
                enviar = "fallaste";
            }
            
            System.out.println("Enviar en Servidor es: " + enviar );
            ss.sendAnswer(enviar);
            
            
            //------------------------------------------------------------------
            //------------------------------------------------------------------
            //------------------------------------------------------------------
            
            
            do {
                setEnableEnemyField(true);
                
                if( aux.equals("acertaste") )
                {                    
                    //campoEnemigo[currentX][currentY].estadoAcertado();
                    campoEnemigo[currentX][currentY].estadoAcertado();
                    campoEnemigo[currentX][currentY].setOyente(false);
                    
                    bf.addDeshabilitado( new Dimension( currentX, currentY ) );
                }
                
                synchronized (  bf  ) {
                    
                    try{
                        System.out.println(" Servidor Detenido...");
			bf.wait();
                        
                    }catch( InterruptedException e ){
                        System.out.println("Cayo en BF interruptedException");
                    }
                }
                System.out.println("Enviando..." + currentX + ", " + currentY);
            
                
                aux = ss.comunicationSend(currentX, currentY);
                
                if( aux.equals("fallaste") )
                {
                    //campoEnemigo[currentX][currentY].setOyente(true);
                    campoEnemigo[currentX][currentY].estadoClik();
                    //campoEnemigo[currentX][currentY].setOyente(false);
                    
                }else if (aux.equals("ganaste"))
                {
                    System.out.println("Ganaste");
                    System.exit( 0 );
                }
                setEnableEnemyField( false );
                
            } while ( aux.equals("acertaste") );
            aux = "";
            
            campoEnemigo[currentX][currentY].setOyente(true);
            campoEnemigo[currentX][currentY].estadoClik();
            campoEnemigo[currentX][currentY].setOyente(false);
            
            bf.addDeshabilitado( new Dimension( currentX, currentY ) );
            //------------------------------------------------------------------
            //------------------------------------------------------------------
            //------------------------------------------------------------------
        }
    }

    private void iterarCliente()
    {
        String aux = "";
        
        while (true)
        {
            //------------------------------------------------------------------
            //------------------------------------------------------------------
            //------------------------------------------------------------------
            do {
                
                setEnableEnemyField(true);
                
                if( aux.equals("acertaste") )
                {
                    //campoEnemigo[currentX][currentY].setOyente(true);
                    campoEnemigo[currentX][currentY].estadoAcertado();
                    campoEnemigo[currentX][currentY].setOyente(false);
                    
                    bf.addDeshabilitado( new Dimension( currentX, currentY ) );
                }
                
                synchronized (  bf  ) {
                    
                    try{
                        System.out.println(" Cliente Detenido...");
			bf.wait();
                        
                    }catch( InterruptedException e ){
                        System.out.println("Cayo en BF interruptedException");
                    }
                }
                System.out.println("Enviando..." + currentX + ", " + currentY);
                                
                //-------------
                aux = cs.comunicationSend(currentX, currentY);
                //-------------
                if( aux.equals("fallaste") ) {
                    
                    //campoEnemigo[currentX][currentY].setOyente(true);
                    campoEnemigo[currentX][currentY].estadoClik();
                    //campoEnemigo[currentX][currentY].setOyente(false);
                    
                }else if (aux.equals("ganaste")) {
                    
                    System.out.println("Ganaste");
                    System.exit( 0 );
                }
                
                setEnableEnemyField( false );

            } while ( aux.equals("acertaste") );
            aux = "";
            
            campoEnemigo[currentX][currentY].setOyente(true);
            campoEnemigo[currentX][currentY].estadoClik();
            campoEnemigo[currentX][currentY].setOyente(false);
            
            bf.addDeshabilitado( new Dimension( currentX, currentY ) );
            //------------------------------------------------------------------
            //------------------------------------------------------------------
            //------------------------------------------------------------------
            
                        
            enviar = "fallaste";

            while (  (procesar( cs.comunicationReceive() )  ) == true)
            {
                if (flotaDestruida() == true) {
                    System.out.println("Nuestra a flota destruida");
                    enviar = "ganaste";
                } else {
                    enviar = "acertaste";
                }
                cs.sendAnswer(enviar);
                
                enviar = "fallaste";
            }
            
            cs.sendAnswer(enviar);
        }
     
    }
        
        @Override
        public void run() {
            iterar();
        }
        
    }
    
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pAdversary;
    private javax.swing.JPanel pOwn;
    // End of variables declaration//GEN-END:variables
}
